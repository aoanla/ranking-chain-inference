# -*- coding: utf-8 -*-
# Licensed by aoanla under https://creativecommons.org/licenses/by-nc-sa/4.0/
import parse_fts_csv as pfc
import time
import networkx
import sys
#or use matplotlib's implementation: http://matplotlib.org/api/mlab_api.html#matplotlib.mlab.PCA
#import princomp as pcpa
#import sklearn.decomposition as deco
###parameters
##date limits

datelim = time.mktime(time.strptime("13 Sep 16", "%d %b %y"))   #end of sample training secords
datestart = datelim - 12*28*24*60*60 # 9 months = time for largest stable group to form / minimum number of total connected groups to be reached with this dataset
#datestart = datelim - 4*28*24*60*60 # 6 months, testing smaller sample size effects

datetest = datelim + 60*60*24*1 #1 month after datelim, end of testing records


##source data
teamfile = "flattrackstats_teams_2016-09-13.csv"
#teamfile = "top40.csv"
boutfile = "flattrackstats_bouts_2016-09-13.csv"
#boutfile = "flattrackstats_bouts_2016-06-06-Champs2015.csv"

###sequencing
##initialisation
teams_in = pfc.import_teams(teamfile)
bouts_in = pfc.import_bouts(boutfile) #second factor is Laplace/Keener ratio perturbation
print len(bouts_in)
##selection
teams_winnowed = pfc.select_teams(teams_in,genuses=['W','M'])
(bouts_out,boutgraph,names) = pfc.select_bouts_weighted(bouts_in,teams_winnowed,datestart,datelim,datetest,weight='ratio',bidir=True)

print len(bouts_out[0])

##subgraph selection

#select largest subgraph - we've changed this to return the actual subgraphs!!
subgraphs = pfc.process_subgraphs_2_directed(boutgraph, teams_winnowed)
smax = {}
subgraphs.sort(reverse=True, key = len )

[sys.stdout.write((u'„ÅÇ'.join([d]+list(teams_winnowed[d]))+'\n').encode('utf-8')) for d in subgraphs[0].nodes()]
