# Licensed by aoanla under https://creativecommons.org/licenses/by-nc-sa/4.0/
import os
import parse_fts_csv as pfc
import time

def sec_from_date(in_date):
	return  time.mktime(time.strptime(in_date, "%d %b %y"))
###parameters
##date limits
datestart = time.mktime(time.strptime("1 Jan 14", "%d %b %y")) #start of sample training records
datelim = time.mktime(time.strptime("1 Jan 15", "%d %b %y"))   #end of sample training secords
datetest = datelim + 1#60*60*24*30*2 #2 months after datelim, end of testing records
##source data
teamfile = "flattrackstats_teams_2015-06-03.csv"
boutfile = "flattrackstats_bouts_2015-06-03.csv"

###sequencing
##initialisation
teams_in = pfc.import_teams(teamfile)
bouts_in = pfc.import_bouts(boutfile)

genuses = ['W','M','C','J']
#mapping = {'C':1,'J':2,'M':4,'W':8}
teams_genus = { g:pfc.select_teams(teams_in,genuses=[g]) for g in genuses}
print [(k,len(teams_genus[k])) for k in genuses]
	##selection - iterate through every year period from 2005 to 2014 start date
(bouts_out,boutgraph,names) = pfc.select_bouts_teamdict(bouts_in,teams_genus,datestart,datelim,datetest)


print len(teams_in.keys())
#(there will be code to subdivide the bouts_out into different subgraphs)
##output the linear regression stuff
#pfc.write_names(teams_winnowed,names)
#pfc.output_matrices(bouts_out,names)
print 'Bouts: ' + str(len(boutgraph.edges()))
print 'Teams: ' + str(len(boutgraph.nodes()))

indexed_bouts = dict()
#non_zero_classes = list()
for e in boutgraph.edges():
	teams = [teams_in[ei] for ei in e]
	teams.sort(cmp=lambda x,y: cmp(x[2],y[2]))
	Class = teams[0][2] + " v " + teams[1][2]
	if Class not in indexed_bouts:
		indexed_bouts[Class] = list()
		#non_zero_classes.append((Class, teams[0][2]+" v "+teams[1][2]))
	indexed_bouts[Class].append([teams[0][0],teams[1][0]])

for Class,bouts in indexed_bouts.iteritems():
	print Class
	for b in bouts:
		print b
